/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and a shared access model for inquiries and their messages.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Each user can only access their own profile.
 * - /inquiries/{inquiryId}: Stores customer service inquiries.
 * - /inquiries/{inquiryId}/messages/{messageId}: Stores messages associated with a specific inquiry.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - All authenticated users can create inquiries.
 * - Messages are associated with an inquiry and the user who created the message.
 *
 * Denormalization for Authorization:
 * - The `Message` documents denormalize the `userId` to enable direct authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (read, write) if user is signed in and the requested userId matches the authenticated user's ID.
     *   Example: A user with UID "user_abc" can read and write the document at /users/user_abc.
     * @deny (read, write) if user is not signed in, or the requested userId does not match the authenticated user's ID.
     *   Example: A user with UID "user_def" cannot read or write the document at /users/user_abc.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to inquiry documents.
     * @path /inquiries/{inquiryId}
     * @allow (create) if the user is signed in.
     *   Example: Any logged-in user can create a new inquiry.
     * @deny (read, update, delete) if the user is not the owner.
     *   Example: User "user_def" cannot read, update, or delete an inquiry owned by "user_abc".
     * @principle Enforces user ownership for inquiries, allowing read/write access only to the owner.
     */
    match /inquiries/{inquiryId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false; // Listing inquiries is disabled
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to message documents within an inquiry.
     * @path /inquiries/{inquiryId}/messages/{messageId}
     * @allow (create) if the user is signed in.
     *   Example: User "user_abc" can create a message in inquiry "inquiry_123".
     * @deny (read, update, delete) if the user is not signed in or does not own the message.
     *   Example: User "user_def" cannot read, update, or delete a message in inquiry "inquiry_123" that belongs to "user_abc".
     * @principle Enforces user ownership for messages, allowing read/write access only to the owner.
     */
    match /inquiries/{inquiryId}/messages/{messageId} {
      // Helper function to check if the user is signed in.
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false; // Listing messages is disabled
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}