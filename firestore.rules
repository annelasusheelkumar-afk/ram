/**
 * @file Firebase Security Rules for ServAI Customer Service Solution
 *
 * @core-philosophy This ruleset enforces a strict user-ownership model for inquiries and their associated messages.
 *  Users can only create, read, update, and delete their own inquiries and messages.
 *  User profiles are publicly readable but only updatable by the user themselves.
 *
 * @data-structure
 * - `/users/{userId}`: Stores public user profile information. Document ID is the Firebase Auth UID.
 * - `/inquiries/{inquiryId}`: Stores customer service inquiries. Each inquiry has a `userId` field indicating ownership.
 * - `/inquiries/{inquiryId}/messages/{messageId}`: Stores chat logs for inquiries. Each message has a `senderId` (user or bot).
 *
 * @key-security-decisions
 * - Users can list inquiries and messages they own.
 * - User listing is not allowed.
 * - Data shape is not strictly enforced beyond ownership checks.
 *
 * @denormalization-for-authorization
 *  - The `Inquiry` entity has a `userId` field, enabling direct ownership checks without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can read all profiles, but only update their own.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get, list): Any user can read any user profile.
     * @allow (create, update): Only the user with the matching UID can create or update their own profile.
     * @deny (delete): Users cannot delete their profiles through direct Firestore access.
     * @principle Enforces user-ownership for profile updates.
     */
    match /users/{userId} {
      // Anyone can read user profiles
      allow get, list: if true;
      // Only the user themselves can create their profile.
      allow create: if isSignedIn() && request.auth.uid == userId;
      // Only the user themselves can update their profile.
      allow update: if isSignedIn() && isOwner(userId);
      // No one can delete a user's profile.
      allow delete: if false;
    }

    /**
     * @description Secure customer service inquiries.  Users can create, read, update, and delete their own inquiries.
     * @path /databases/{database}/documents/inquiries/{inquiryId}
     * @allow (get, list): Any signed-in user can list inquiries they own.
     * @allow (create): Only signed-in users can create inquiries, with userId same as request.auth.uid.
     * @allow (update, delete): Only the owner of the inquiry can update or delete it.
     * @deny Creates and updates that do not have the userId set correctly
     * @principle Enforces document ownership for writes.
     */
    match /inquiries/{inquiryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Secure messages within customer service inquiries.  Users can create, read, and potentially update/delete messages within their inquiries.
     * @path /databases/{database}/documents/inquiries/{inquiryId}/messages/{messageId}
     * @allow (get, list): Any signed-in user can list messages for inquiries they own.
     * @allow (create): Only signed-in users can create messages in inquiries they own, with senderId same as request.auth.uid
     * @allow (update, delete): Only the owner of the inquiry can update or delete messages (for auditing purposes, not typically allowed).
     * @deny Creates and updates that do not have the senderId set correctly.
     * @principle Enforces document ownership for writes.
     */
    match /inquiries/{inquiryId}/messages/{messageId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn(); // The error indicates the list permission is missing for the current user, the user should be able to create, but perhaps the rules prevent that?
        allow update: if false;
        allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}