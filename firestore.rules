/**
 * @fileoverview Firestore Security Rules for ServAI customer service solution.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and access controls.
 * Users can only read and write their own data, and inquiries can be viewed by all users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, with the document ID matching the Firebase Auth UID.
 * - /inquiries/{inquiryId}: Top-level collection for customer service inquiries.
 * - /inquiries/{inquiryId}/messages/{messageId}: Subcollection storing messages for each inquiry.
 *
 * Key Security Decisions:
 * - Users can list all inquiries
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the resource userId and that the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document at /users/user123.
     * @deny (create) - User with UID 'user123' cannot create a profile document at /users/user456.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile document at /users/user123.
     * @deny (get, update, delete) - User with UID 'user123' cannot read, update, or delete the profile document of user 'user456' at /users/user456.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for customer service inquiries.
     * @path /inquiries/{inquiryId}
     * @allow (create) - Any authenticated user can create an inquiry. The 'userId' field must match their UID.
     * @deny (create) - An unauthenticated user cannot create an inquiry.
     * @allow (get, list) - Any authenticated user can read any inquiry.
     * @allow (update, delete) - Only the user who created the inquiry can update or delete it.
     * @deny (update, delete) - Another user cannot update or delete an inquiry they did not create.
     * @principle Allows public read access to inquiries but restricts write access to the owner.
     */
    match /inquiries/{inquiryId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for messages within a customer service inquiry.
     * @path /inquiries/{inquiryId}/messages/{messageId}
     * @allow (create) - Any authenticated user can create a message within an inquiry.
     * @deny (create) - An unauthenticated user cannot create a message.
     * @allow (get, list) - Any authenticated user can read any message within an inquiry.
     * @allow (update, delete) - No one can update or delete a message (messages are immutable).
     */
    match /inquiries/{inquiryId}/messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}