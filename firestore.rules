/**
 * @fileoverview Firestore Security Rules for ServAI Customer Service Solution
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, blending user-owned data with role-based access control for sensitive information.
 *
 * Data Structure:
 * - /users/{userId}: Public user profiles, readable by anyone, but writable only by the owner.
 * - /inquiries/{inquiryId}: Customer inquiries, owned by the user who created them.
 * - /inquiries/{inquiryId}/messages/{messageId}: Messages within an inquiry, also user-owned.
 * - /sales/{saleId}: Sales data, accessible only to administrators.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Strict ownership is enforced for inquiries and messages.
 * - Sales data is strictly limited to admin access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has the 'admin' role.
     * @details This requires you to store the user's role in their /users/{userId} document.
     */
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Rules for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (create) - User can create their own profile if the userId matches their auth UID.
     * @allow (get) - Anyone can read a user's profile.
     * @allow (update) - User can update their own profile.
     * @deny (delete) - Users cannot delete their own profiles through Firestore.
     * @principle Enforces document ownership and prevents unauthorized data modification.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false; // Prevent user listing
      allow create: if isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if false;
    }

    /**
     * @description Rules for /inquiries/{inquiryId} documents.
     * @path /inquiries/{inquiryId}
     * @allow (create) - User can create an inquiry if the userId matches their auth UID.
     * @allow (get) - Any signed in user can get an inquiry.
     * @allow (update) - User can update their own inquiry.
     * @deny (delete) - Only the owner can delete an inquiry.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /inquiries/{inquiryId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for /inquiries/{inquiryId}/messages/{messageId} documents.
     * @path /inquiries/{inquiryId}/messages/{messageId}
     * @allow (create) - User can create a message if the userId matches their auth UID.
     * @allow (get) - Any signed in user can get a message.
     * @allow (update) - User can update their own message.
     * @deny (delete) - Only the owner can delete their message.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /inquiries/{inquiryId}/messages/{messageId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for /sales/{saleId} documents.
     * @path /sales/{saleId}
     * @allow (get) - Only admins can read sales data.
     * @allow (create) - Only admins can create sales data.
     * @allow (update) - Only admins can update sales data.
     * @deny (delete) - Only admins can delete sales data.
     * @principle Restricts sales data access to administrators.
     */
    match /sales/{saleId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }
  }
}