/**
 * @file Firebase Security Rules for ServAI Customer Service Solution
 *
 * @core-philosophy This ruleset enforces a user-ownership model for inquiries and their associated messages.
 *  Each user can only access their own inquiries and messages. Public read access is not granted to any collection.
 * @data-structure
 *  - /users/{userId}: Stores user profile information. The document ID matches the Firebase Auth UID.
 *  - /inquiries/{inquiryId}: Stores customer service inquiries. Each inquiry has a `userId` field indicating the owner.
 *  - /inquiries/{inquiryId}/messages/{messageId}: Stores messages for each inquiry.
 * @key-security-decisions
 *  - Users can only create, read, update, and delete their own inquiries and messages.
 *  - Listing inquiries is restricted to the owner.
 *  - Public listing of any collection is disallowed.
 *  - No global admin roles are defined.
 * @denormalization-for-authorization
 *  - The `Inquiry` entity contains a `userId` field, which is used to enforce ownership.
 * @structural-segregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource based on the provided userId.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the resource's userId.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profile documents.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the UID matches the document ID.
     * @allow (get, update, delete) - A user can only access and modify their own profile.
     * @deny (create) - A user cannot create a profile with an ID that does not match their UID.
     * @deny (get, update, delete) - A user cannot access or modify another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for customer service inquiries.
     * @path /inquiries/{inquiryId}
     * @allow (create) - A user can create an inquiry if the userId matches their UID.
     * @allow (get, list, update, delete) - A user can only access and modify their own inquiries.
     * @deny (create) - A user cannot create an inquiry with a userId that does not match their UID.
     * @deny (get, list, update, delete) - A user cannot access or modify another user's inquiries.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /inquiries/{inquiryId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isOwner(resource.data.userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for messages within customer service inquiries.
     * @path /inquiries/{inquiryId}/messages/{messageId}
     * @allow (create) - A user can create a message within their own inquiry.
     * @allow (get, list, update, delete) - A user can only access and modify messages within their own inquiries.
     * @deny (create) - A user cannot create a message within an inquiry they don't own.
     * @deny (get, list, update, delete) - A user cannot access or modify messages within inquiries they don't own.
     * @principle Enforces document ownership for writes and restricts access to a user's own data.
     */
    match /inquiries/{inquiryId}/messages/{messageId} {
      allow get: if isOwner(get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId);
      allow list: if isOwner(get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId);
      allow create: if isSignedIn() && isOwner(get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId);
      allow update: if isSignedIn() && isOwner(get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId);
      allow delete: if isSignedIn() && isOwner(get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId);
    }
  }
}