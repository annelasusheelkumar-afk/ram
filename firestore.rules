/**
 * @fileoverview Firestore Security Rules for ServAI customer service solution.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for inquiries and their messages,
 * ensuring that only the creator of an inquiry can modify it. Users can read all
 * inquiries.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles.
 * - /inquiries/{inquiryId}: Stores customer service inquiries.
 * - /inquiries/{inquiryId}/messages/{messageId}: Stores messages for each inquiry.
 *
 * Key Security Decisions:
 * - Users can read all inquiries, but can only modify their own.
 * - Only the inquiry owner can add messages to an inquiry.
 * - Listing inquiries is allowed for all users.
 *
 * Denormalization for Authorization:
 * The `Inquiry` entity has a `userId` field, which is used to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile.
     *   Request: auth.uid = "user123", document.id = "user123"
     * @allow (get) - Authenticated user reads their own profile.
     *   Request: auth.uid = "user123", path = "/users/user123"
     * @allow (update) - Authenticated user updates their own profile.
     *   Request: auth.uid = "user123", path = "/users/user123"
     * @allow (delete) - Authenticated user deletes their own profile.
     *   Request: auth.uid = "user123", path = "/users/user123"
     * @deny (create) - Authenticated user attempts to create another user's profile.
     *   Request: auth.uid = "user123", document.id = "user456"
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      allow delete: if isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Allows anyone to read inquiries but only the owner to modify them.
     * @path /inquiries/{inquiryId}
     * @allow (get) - Any user can read an inquiry.
     *   Request: auth.uid = "user123", path = "/inquiries/inquiry1"
     * @allow (list) - Any user can list inquiries.
     *   Request: auth.uid = "user123", path = "/inquiries"
     * @allow (create) - Authenticated user creates a new inquiry with correct ownership.
     *   Request: auth.uid = "user123", document.data.userId = "user123"
     * @deny (create) - Authenticated user attempts to create an inquiry for another user.
     *   Request: auth.uid = "user123", document.data.userId = "user456"
     * @deny (update) - Unauthorized user attempts to update an inquiry.
     *   Request: auth.uid = "user456", path = "/inquiries/inquiry1", document.data.userId = "user123"
     * @principle Enforces owner-only writes with public reads.
     */
    match /inquiries/{inquiryId} {
      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    /**
     * @description Allows the owner of an inquiry to add messages to it.
     * @path /inquiries/{inquiryId}/messages/{messageId}
     * @allow (create) - Authenticated user creates a message in their inquiry.
     *   Request: auth.uid = "user123", path = "/inquiries/inquiry1/messages/message1"
     * @deny (create) - Unauthorized user attempts to create a message in another user's inquiry.
     *   Request: auth.uid = "user456", path = "/inquiries/inquiry1/messages/message1"
     * @principle Enforces ownership for message creation.
     */
    match /inquiries/{inquiryId}/messages/{messageId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingInquiryOwner(userId) {
    return isSignedIn() && request.auth.uid == resource.data.userId;
  }
}