/**
 * @fileoverview Firestore Security Rules for ServAI Customer Service Solution
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for inquiries and their messages.
 * Users can only read and write data related to their own inquiries.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. The document ID matches the user's Firebase Auth UID.
 * - /inquiries/{inquiryId}: Stores customer service inquiries. Each inquiry has a userId field indicating the owner.
 * - /inquiries/{inquiryId}/messages/{messageId}: Stores the chat log for a specific inquiry.
 *
 * Key Security Decisions:
 * - Users can only list messages within their own inquiries.
 * - Users cannot list all inquiries (or all users).
 *
 * Denormalization for Authorization:
 * - Inquiries denormalize the userId of the owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to user documents based on ownership.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     *   - Auth: { uid: 'user123' }
     *   - Request: { id: 'user123', email: 'test@example.com' }
     * @allow (get) User with UID 'user456' can read their own profile.
     *   - Auth: { uid: 'user456' }
     * @deny (update) User with UID 'user789' cannot update another user's profile.
     *   - Auth: { uid: 'user789' }
     *   - Resource data: { id: 'user123', email: 'new@example.com' }
     * @principle Enforces document ownership for reads and writes, and validates relational integrity.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Allows access to inquiry documents based on ownership.
     * @path /inquiries/{inquiryId}
     * @allow (create) User with UID 'user123' can create a new inquiry with their ID.
     *   - Auth: { uid: 'user123' }
     *   - Request: { userId: 'user123', title: 'My Inquiry' }
     * @allow (get) User with UID 'user456' can read their own inquiry.
     *   - Auth: { uid: 'user456' }
     * @deny (update) User with UID 'user789' cannot update an inquiry they don't own.
     *   - Auth: { uid: 'user789' }
     *   - Resource data: { userId: 'user123', title: 'Updated Title' }
     * @principle Enforces document ownership for writes, and validates relational integrity.
     */
    match /inquiries/{inquiryId} {
      function isOwner(inquiryId) {
        return get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId == request.auth.uid;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(inquiryId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(inquiryId);
      allow delete: if isSignedIn() && isOwner(inquiryId);
    }

    /**
     * @description Allows access to message documents within an inquiry based on inquiry ownership.
     * @path /inquiries/{inquiryId}/messages/{messageId}
     * @allow (create) User with UID 'user123' can create a message in their inquiry.
     *   - Auth: { uid: 'user123' }
     *   - Parent Inquiry: { userId: 'user123' }
     *   - Request: { senderId: 'user123', content: 'Hello' }
     * @allow (get) User with UID 'user456' can read a message in their inquiry.
     *   - Auth: { uid: 'user456' }
     *   - Parent Inquiry: { userId: 'user456' }
     * @deny (update) User with UID 'user789' cannot update a message in an inquiry they don't own.
     *   - Auth: { uid: 'user789' }
     *   - Parent Inquiry: { userId: 'user123' }
     *   - Resource data: { content: 'Updated Content' }
     * @principle Enforces document ownership by checking the parent inquiry.
     */
    match /inquiries/{inquiryId}/messages/{messageId} {
        function isOwner(inquiryId) {
            return get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId == request.auth.uid;
        }

        function isSignedIn() {
            return request.auth != null;
        }

      allow get: if isSignedIn() && isOwner(inquiryId);
      allow list: if isSignedIn() && isOwner(inquiryId);
      allow create: if isSignedIn() && isOwner(inquiryId);
      allow update: if isSignedIn() && isOwner(inquiryId);
      allow delete: if isSignedIn() && isOwner(inquiryId);
    }
  }
}