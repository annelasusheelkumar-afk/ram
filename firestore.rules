/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and a public-read, owner-write model for inquiries and their messages.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information. Document ID matches the Firebase Auth UID.
 * - /inquiries/{inquiryId}: Top-level collection for customer service inquiries.
 * - /inquiries/{inquiryId}/messages/{messageId}: Subcollection storing messages for each inquiry.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; only the authenticated user can read/write their own profile.
 * - Public listing of users is disallowed.
 * - Inquiries and messages are publicly readable but only writable by the owner (creator). The owner is determined by the `userId` field on the inquiry document.
 *
 * Denormalization for Authorization:
 * - Inquiries must contain a `userId` field to denote ownership.
 *
 * Structural Segregation:
 * - User profiles are stored in a dedicated /users collection, separate from public content.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get) Authenticated user can read their own profile if the userId matches their auth.uid.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth.uid.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth.uid.
     * @deny (create) An unauthenticated user cannot create any user profiles.
     * @deny (get) An unauthenticated user cannot read any user profiles.
     * @deny (update) User cannot modify another user's profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      // Helper function to check if a user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}