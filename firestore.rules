/**
 * @fileoverview Firestore Security Rules for ServAI customer service solution.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for inquiries and their messages.
 * Users can only create, read, update, and delete their own inquiries and messages.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the document ID matching the Firebase Auth UID.
 * - /inquiries/{inquiryId}: Stores customer service inquiries. Each inquiry has a 'userId' field indicating ownership.
 * - /inquiries/{inquiryId}/messages/{messageId}: Stores chat messages for each inquiry. Each message also has a 'userId' field.
 *
 * Key Security Decisions:
 * - Users can only list inquiries that they own.
 * - Users can only list messages within inquiries that they own.
 * - Data shape is NOT strictly validated in this prototyping phase.
 *
 * Denormalization for Authorization:
 * The 'userId' field is present on both inquiries and messages, enabling direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to manage their own profile information.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123. The request.resource.data.id must equal request.auth.uid
     * @allow (get, update, delete) - User with UID 'user123' can read/update/delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete the profile at /users/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false; // User listing is not permitted

      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows users to manage their own inquiries.
     * @path /inquiries/{inquiryId}
     * @allow (create) - User with UID 'user123' can create an inquiry with userId: 'user123'.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/list/update/delete their own inquiries (where inquiry.userId == 'user123').
     * @deny (create) - User with UID 'user456' cannot create an inquiry with userId: 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot read/list/update/delete inquiries owned by 'user123'.
     * @principle Enforces document ownership for inquiries.
     */
    match /inquiries/{inquiryId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && request.auth.uid == request.query.parameters.userId;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows users to manage messages within their own inquiries.
     * @path /inquiries/{inquiryId}/messages/{messageId}
     * @allow (create) - User with UID 'user123' can create a message in inquiry 'inq123' if inquiry 'inq123' belongs to them (inquiry.userId == 'user123') and the message has the same userId.
     * @allow (get, list, update, delete) - User with UID 'user123' can read/list/update/delete messages in inquiry 'inq123' if inquiry 'inq123' belongs to them and the message has the same userId.
     * @deny (create) - User with UID 'user456' cannot create a message in inquiry 'inq123' if inquiry 'inq123' belongs to 'user123'.
     * @deny (get, list, update, delete) - User with UID 'user456' cannot read/list/update/delete messages in inquiry 'inq123' if inquiry 'inq123' belongs to 'user123'.
     * @principle Enforces document ownership for messages within inquiries.  Relies on parent inquiry for authorization.
     */
    match /inquiries/{inquiryId}/messages/{messageId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId == request.auth.uid && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn() && get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId == request.auth.uid;

      allow create: if isSignedIn() && get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId == request.auth.uid && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId == request.auth.uid;
      allow delete: if isExistingOwner(resource.data.userId) && get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId == request.auth.uid;
    }
  }
}