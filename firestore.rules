/**
 * @fileoverview Firestore Security Rules for ServAI Customer Service Solution
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model, where users can only read and write their own data.
 * All data is nested under /users/{userId}, /inquiries/{inquiryId} or /inquiries/{inquiryId}/messages/{messageId}.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information. Document ID matches Firebase Auth UID.
 * - /inquiries/{inquiryId}: Stores customer service inquiries. Owned by users.
 * - /inquiries/{inquiryId}/messages/{messageId}: Stores chat logs for inquiries. Subcollection of inquiries.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents. Listing all users is disallowed.
 * - Inquiries can be read/written by their owner.
 * - Messages can be read/written by the inquiry owner.
 *
 * Denormalization for Authorization:
 * - Inquiries should include the userId of the owner for efficient authorization.
 * - Messages should include the userId of the sender.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     *              This also verifies that the document exists.
     * @param {string} userId - The user ID of the owner.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own document if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can read/update/delete their own document.
     * @deny (create) - User with UID 'user_xyz' cannot create a document for user 'user_abc'.
     * @deny (list) - Listing all users is not allowed.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for inquiry documents.
     * @path /inquiries/{inquiryId}
     * @allow (create) - User with UID 'user_abc' can create an inquiry with userId: 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can read/update/delete inquiry with userId: 'user_abc'.
     * @deny (create) - User with UID 'user_xyz' cannot create an inquiry for user 'user_abc'.
     * @deny (update) - User with UID 'user_xyz' cannot update an inquiry owned by user 'user_abc'.
     * @principle Enforces document ownership for writes and restricts access to a user's own inquiries.
     */
    match /inquiries/{inquiryId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Security rules for messages within an inquiry.
     * @path /inquiries/{inquiryId}/messages/{messageId}
     * @allow (create) - User with UID 'user_abc' can create a message in inquiry owned by 'user_abc'.
     * @allow (get, list) - User with UID 'user_abc' can read messages in inquiry owned by 'user_abc'.
     * @allow (update, delete) - Only the message creator can update/delete, and only if they own the parent inquiry.
     * @deny (create) - User 'user_xyz' cannot create a message in an inquiry owned by 'user_abc'.
     * @principle Enforces document ownership and restricts access to messages within a user's inquiries.
     */
    match /inquiries/{inquiryId}/messages/{messageId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn() && get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId == request.auth.uid;
        allow update: if false; // No updates allowed on messages
        allow delete: if false; // No deletes allowed on messages
    }
  }
}