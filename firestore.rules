/**
 * @fileoverview Firestore Security Rules for ServAI Customer Service Solution
 *
 * Core Philosophy:
 * This ruleset employs a strict user-ownership model for inquiries and messages,
 * ensuring users can only access data associated with their own accounts.
 * Sales data is restricted to admin users only.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the document ID matching the Firebase Auth UID.
 * - /inquiries/{inquiryId}: Stores customer inquiries, owned by users via the `userId` field.
 * - /inquiries/{inquiryId}/messages/{messageId}: Stores messages related to an inquiry, owned by users via the `userId` field.
 * - /sales/{saleId}: Stores sales data, accessible only to admin users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Users can create inquiries and add messages to them.
 * - Sales data is only accessible to admin users.
 * - No user listing is allowed.
 *
 * Denormalization for Authorization:
 * - Inquiries and Messages both contain a `userId` field to enable direct ownership checks without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if request.auth.uid == userId
     * @deny (get, create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to create, read, update, and delete their own inquiries.
     * @path /inquiries/{inquiryId}
     * @allow (create) if request.auth.uid == request.resource.data.userId
     * @allow (get, list, update, delete) if request.auth.uid == resource.data.userId
     * @deny (create, get, list, update, delete) if request.auth.uid != resource.data.userId
     * @principle Enforces document ownership for inquiries.
     */
    match /inquiries/{inquiryId} {
      function isOwner(inquiry) {
        return request.auth.uid == resource.data.userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(inquiry);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && isOwner(inquiry);
      allow delete: if isSignedIn() && isOwner(inquiry);
    }

    /**
     * @description Allows users to create, read, write messages within their own inquiries.
     * @path /inquiries/{inquiryId}/messages/{messageId}
     * @allow (create) if get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId == request.auth.uid
     * @allow (get, list, update, delete) if get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId == request.auth.uid
     * @deny (create, get, list, update, delete) if get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId != request.auth.uid
     * @principle Enforces document ownership for messages within inquiries.
     */
    match /inquiries/{inquiryId}/messages/{messageId} {
      function isInquiryOwner(inquiryId) {
        return get(/databases/$(database)/documents/inquiries/$(inquiryId)).data.userId == request.auth.uid;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isInquiryOwner(inquiryId);
      allow list: if false;
      allow create: if isSignedIn() && isInquiryOwner(inquiryId);
      allow update: if isSignedIn() && isInquiryOwner(inquiryId);
      allow delete: if isSignedIn() && isInquiryOwner(inquiryId);
    }

    /**
     * @description Restricts access to sales data to admin users only.
     * @path /sales/{saleId}
     * @allow (get, list) if request.auth.token.role == "admin"
     * @deny (create, update, delete)
     * @principle Restricts sales data access to authorized personnel.
     */
    match /sales/{saleId} {
      function isAdmin() {
        return request.auth.token.role == "admin";
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}